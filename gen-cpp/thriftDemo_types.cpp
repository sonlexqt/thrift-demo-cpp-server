/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thriftDemo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thriftDemo {


User::~User() throw() {
}


void User::__set_username(const std::string& val) {
  this->username = val;
}

void User::__set_userIP(const std::string& val) {
  this->userIP = val;
__isset.userIP = true;
}

const char* User::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t User::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_username = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          isset_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userIP);
          this->__isset.userIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_username)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userIP) {
    xfer += oprot->writeFieldBegin("userIP", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userIP);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.userIP, b.userIP);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  username = other0.username;
  userIP = other0.userIP;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  username = other1.username;
  userIP = other1.userIP;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const User& obj) {
  using apache::thrift::to_string;
  out << "User(";
  out << "username=" << to_string(obj.username);
  out << ", " << "userIP="; (obj.__isset.userIP ? (out << to_string(obj.userIP)) : (out << "<null>"));
  out << ")";
  return out;
}


ServerManager::~ServerManager() throw() {
}


void ServerManager::__set_totalAccessCounter(const int32_t val) {
  this->totalAccessCounter = val;
}

void ServerManager::__set_userAccessCounter(const std::map<std::string, int32_t> & val) {
  this->userAccessCounter = val;
}

const char* ServerManager::ascii_fingerprint = "80B16C7FD3CCD9B0A6BE74B73F41E53D";
const uint8_t ServerManager::binary_fingerprint[16] = {0x80,0xB1,0x6C,0x7F,0xD3,0xCC,0xD9,0xB0,0xA6,0xBE,0x74,0xB7,0x3F,0x41,0xE5,0x3D};

uint32_t ServerManager::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_totalAccessCounter = false;
  bool isset_userAccessCounter = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalAccessCounter);
          isset_totalAccessCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userAccessCounter.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              int32_t& _val8 = this->userAccessCounter[_key7];
              xfer += iprot->readI32(_val8);
            }
            xfer += iprot->readMapEnd();
          }
          isset_userAccessCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_totalAccessCounter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userAccessCounter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ServerManager::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServerManager");

  xfer += oprot->writeFieldBegin("totalAccessCounter", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->totalAccessCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userAccessCounter", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->userAccessCounter.size()));
    std::map<std::string, int32_t> ::const_iterator _iter9;
    for (_iter9 = this->userAccessCounter.begin(); _iter9 != this->userAccessCounter.end(); ++_iter9)
    {
      xfer += oprot->writeString(_iter9->first);
      xfer += oprot->writeI32(_iter9->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServerManager &a, ServerManager &b) {
  using ::std::swap;
  swap(a.totalAccessCounter, b.totalAccessCounter);
  swap(a.userAccessCounter, b.userAccessCounter);
}

ServerManager::ServerManager(const ServerManager& other10) {
  totalAccessCounter = other10.totalAccessCounter;
  userAccessCounter = other10.userAccessCounter;
}
ServerManager& ServerManager::operator=(const ServerManager& other11) {
  totalAccessCounter = other11.totalAccessCounter;
  userAccessCounter = other11.userAccessCounter;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ServerManager& obj) {
  using apache::thrift::to_string;
  out << "ServerManager(";
  out << "totalAccessCounter=" << to_string(obj.totalAccessCounter);
  out << ", " << "userAccessCounter=" << to_string(obj.userAccessCounter);
  out << ")";
  return out;
}

} // namespace
